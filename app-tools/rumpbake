#!/bin/sh
#
# Copyright (c) 2015 Martin Lucina.  All Rights Reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

#
# rumpbake: script for final stage linking ("baking") of a unikernel image
#

if [ "${RUMPRUN_WARNING_STFU}" != 'please' ]; then
	exec 3>&1 1>&2
	echo
	echo !!!
	echo !!! NOTE: rumpbake is experimental. syntax may change in the future
	echo !!!
	echo
	exec 1>&3 3>&-
fi

usage ()
{
	cat <<EOM
usage: rumpbake TARGET OUTPUT FILE [FILE ...]
       rumpbake list

When invoked the single argument "list", lists supported target boards.

Else, creates a rumprunnable unikernel:
	TARGET: rumprun board configuration to use.
	OUTPUT: output file name for the unikernel image.
	FILE: 	executable to bake.
EOM
	exit 1
}

nuketmpdir ()
{

	nukeme="${TMPDIR}"
	TMPDIR=''
	rm -rf ${nukeme}
}

ALLCONFIGS=
addconfig ()
{
	[ $# -ge 2 ] || { echo rumpbake.conf error; exit 1; }

	confname=$1
	toolchain=$2
	shift 2

	ALLCONFIGS="${ALLCONFIGS} ${confname}"
	eval TOOLCHAIN_${confname}=${toolchain}
	eval CONFIG_${confname}=\"$@\"
}

APP_TOOLS_DIR=$(dirname $0)
CONF=${APP_TOOLS_DIR}/rumpbake.conf
if [ ! -f ${CONF} ]; then
	echo "rumpbake: error: Configuration file ${CONF} not found"
	exit 1
fi
. ${CONF}

TARGET="${1}"
if [ "${TARGET}" = "list" ]; then
	echo ${ALLCONFIGS} | xargs -n 1 echo
	exit 0
fi

OUTPUT="${2}"
[ $# -gt 2 ] || usage
shift 2

[ $# -le 8 ] || { echo '>> max 8 binaries supported currently' ; exit 1; }

# Santize the config argument passed in to remove shell
# metacharacters
config="$(echo ${TARGET} | sed -e 's/-/_/g' -e 's/[^A-Za-z0-9_]//g')"
for c in ${ALLCONFIGS}; do
	[ "$c" = "$config" ] && break
done
if [ "$c" != "$config" ]; then
	echo "rumpbake: error: unsupported config \"$config\""
	exit 1
fi

# Sets CONFIG to $(CONFIG_<name>) and CC to $(CC_<name>)
eval CONFIG="\${CONFIG_${config}}"
eval TOOLCHAIN="\${TOOLCHAIN_${config}}"

# Parse CONFIG, mapping each component to $LIBS_component and each resulting
# lib to -l$lib
LIBS=-lrumpvfs
for component in ${CONFIG}; do
	for lib in $(eval echo \${LIBS_${component}}); do
		LIBS="${LIBS} -l${lib}"
	done
done

# Check if the file is a relocatable object produced by a rumprun toolchain
if ! grep -q __RuMpRuN_fermented__ ${FILE}; then
	echo "Overwriting rumpbake"
#	exit 1
fi

# Final link using cc to produce the unikernel image.
${APP_TOOLS_DIR}/${TOOLCHAIN}-cc \
    -bake -o ${OUTPUT} ${allobjs} -Wl,--whole-archive ${LIBS} || exit 1
